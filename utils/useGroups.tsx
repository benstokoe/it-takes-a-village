import { useCallback, useEffect, useState } from 'react';
import { supabase } from '@/utils/supabase';
import { Group, GroupMember, Profile } from '@/database.types';
import { useAuth } from '@/utils/useAuth';

export type UserGroup = Group & {
  group_members: (GroupMember & {
    profiles: Profile;
  })[];
};

type UseGroupsReturn = {
  groups: UserGroup[];
  isLoading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
  createGroup: (name: string, description?: string) => Promise<Group | null>;
};

export function useGroups(): UseGroupsReturn {
  const { session } = useAuth();
  const [groups, setGroups] = useState<UserGroup[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchGroups = useCallback(async () => {
    if (!session?.user?.id) {
      setGroups([]);
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      console.log('fetching groups');
      const { data, error: fetchError } = await supabase
        .from('groups')
        .select(
          `
          *,
          group_members!inner(
            id,
            group_id,
            user_id,
            relationship_label,
            role,
            joined_at,
            is_active,
            profiles!inner(
              id,
              email,
              full_name,
              avatar_url
            )
          )
        `
        )
        .eq('group_members.user_id', session.user.id)
        .eq('group_members.is_active', true);

      console.log(data);

      if (fetchError) {
        throw fetchError;
      }

      setGroups(data || []);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch groups';
      setError(errorMessage);
      console.error('Error fetching groups:', err);
    } finally {
      setIsLoading(false);
    }
  }, [session?.user?.id]);

  const createGroup = useCallback(
    async (name: string, description?: string): Promise<Group | null> => {
      if (!session?.user?.id) {
        throw new Error('User must be authenticated to create a group');
      }

      try {
        const { data: groupData, error: groupError } = await supabase
          .from('groups')
          .insert({
            name,
            description,
            created_by: session.user.id,
            invite_code: '', // Will be generated by the trigger
          })
          .select()
          .single();

        if (groupError) {
          throw groupError;
        }

        // Add the creator as an admin member
        const { error: memberError } = await supabase.from('group_members').insert({
          group_id: groupData.id,
          user_id: session.user.id,
          relationship_label: 'Creator',
          role: 'admin',
        });

        if (memberError) {
          throw memberError;
        }

        // Refresh the groups list
        await fetchGroups();

        return groupData;
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to create group';
        setError(errorMessage);
        console.error('Error creating group:', err);
        return null;
      }
    },
    [session?.user?.id, fetchGroups]
  );

  useEffect(() => {
    fetchGroups();
  }, [fetchGroups]);

  return {
    groups,
    isLoading,
    error,
    refetch: fetchGroups,
    createGroup,
  };
}
